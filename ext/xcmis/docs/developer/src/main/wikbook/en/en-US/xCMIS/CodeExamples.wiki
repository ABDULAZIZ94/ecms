The following examples of CMIS usage may be useful for developers wants to access repository. Most of examples implies using Apache HTTP Client in java examples or 
Google gadets (gadgets.io) in javascript examples for making requests to CMIS.

h2. Login to repository.

CMIS using default Tomcat authenticaton in general case, but it may be overriden in case of embedding CMIS onto other product. So this example covers only 
basic variant of authenticaton.

h3. Using java.

{code:language=java}
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.UsernamePasswordCredentials;
 import org.apache.commons.httpclient.auth.AuthScope;
 import org.apache.commons.httpclient.methods.GetMethod; 

 HttpClient client = new HttpClient(); 
 client.getState().setCredentials(
     new AuthScope("localhost", 8080, "realm"),
     new UsernamePasswordCredentials("root", "exo");
 ....
{code}


h2. Listing of documents (folder, files).

There are a several methods to get the documents listings, such as getChildren(), getFolderTree() and getDescentants(), their usage will be described below.
The difference between them is usage of different URL segments to get data ("/children" for getChildren(), "/foldertree" for getFolderTree(), "/descendants" for getDescentants()),
and a different kind results  (getChildren() returns a flat structure, while a getFolderTree() and getDescentants() has a tree of items in responce).

h3. Using java.

{code:language=java}
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;  


 String url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/children/";
 url += obj_id;

 HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
 client.getHttpConnectionManager().
 getParams().setConnectionTimeout(10000);

 GetMethod get = new GetMethod(url); 
 try {
 int result = client.executeMethod(get);
 final String strResponce = get.getResponseBodyAsString(); 
 } finally {
   get.releaseConnection();
 }
{code}


h3. Using javascript.
Composing URL to make request (consists of repository name, the method name, e.g. "/children/", and folderID to get childrens from):

{code}
 var url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/children/";
 url += obj_id;
{code}

performing request:

{code}
 var params = {};
 params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;
 params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.FEED;
 gadgets.io.makeRequest(url, handler, params);
{code}

processing results (code located in handler specified while making request, the same way may be used for all examples below):
{code}
var handler = function(resp) {
  var data = eval(resp.data.Entry);
   for (var i = 0; i < data.length; i++) {
     var doc = data[i];
     alert(doc.Title);  
     alert(doc.Date);  
      ...etc..
   }
}
{code}

h2. Read document properties and content-stream.

Reading document properties and content-stream it's a separate operations, getting content stream is possible after the properties set is read, and appropriate 
content-stream ID is detected from it.

h3. Using java.

{code:language=java}
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;  

 String url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/object/";
 url += obj_id;

 HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
 client.getHttpConnectionManager().
 getParams().setConnectionTimeout(10000);

 GetMethod get = new GetMethod(url); 
 try {
 int result = client.executeMethod(get);
 final String strResponce = get.getResponseBodyAsString(); 
 } finally {
   get.releaseConnection();
 }
{code}

To get document's content-stream, the URL must contain the "/file" part, object ID, and optionally content stream ID, which can be used, for example, to obtain 
renditions. If no streamId is specified, default stream will be returned.

{code:language=java}
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.methods.PostMethod;

 String url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/file/";
 url += obj_id;
 //Optionally
 url += "?";
 url += "streamid=";
 url += streamID;

 HttpClient client = new HttpClient();
 client.getHttpConnectionManager().
 getParams().setConnectionTimeout(10000);

 PostMethod post = new PostMethod(url);
 try { 
 int result = client.executeMethod(post);
 final InputStream stream = post.getResponseBodyAsStream(); 
 } finally {
   post.releaseConnection();
 }
{code}

h3. Using javascript.

Composing URL to make request (consists of repository name, the method name, e.g. "/children/", and folderID to get childrens from):

{code}
 var url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/object/";
 url += obj_id;
{code}

performing request:

{code}
 var params = {};
 params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;
 params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.FEED;
 gadgets.io.makeRequest(url, handler, params);
{code}

You can also use the ContentType.DOM parameter, you want to parse the feed by yourself (Using DOMParser for example).

Making contestStream request in JS results in calling the standart browser dialog for file downloading.


h2. Search of data and syntax examples.

CMIS suports queries for more handful content search. Query service can uses both GET and POST for consuming requests. URL for query consists of repository name and method name "/query".
GET request must contain query as a parameter named "q", in case of POST request query must be located in request body.

For more detailed instructions how to construct queries please refer see chapter 4.3.5.

h3. Using java.

{code:language=java}
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.StringRequestEntity;

 String url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/query/";

 HttpClient client = new HttpClient();
 client.getHttpConnectionManager().
 getParams().setConnectionTimeout(10000);

 PostMethod post = new PostMethod(url);
 String s = "<?xml version='1.0' encoding='utf-8'?>" //
         + "<cmis:query xmlns='http://www.w3.org/2005/Atom' xmlns:cmis='" + CmisConstants.CMIS_NS_URI + "'>"
         + "<cmis:statement>SELECT * FROM cmis:document</cmis:statement>"
         + "<cmis:maxItems>10</cmis:maxItems>"
         + "<cmis:skipCount>0</cmis:skipCount>"
         + "<cmis:searchAllVersions>true</cmis:searchAllVersions>"
         + "<cmis:includeAllowableActions>true</cmis:includeAllowableActions>"
         + "</cmis:query>";

 RequestEntity entity = new StringRequestEntity(s, "text/xml","utf-8");
 try { 
 post.setRequestEntity(entity);
 int result = client.executeMethod(post);
 final String strResponce = post.getResponseBodyAsString(); 
 } finally {
   post.releaseConnection();
 }
{code}




h3. Using javascript.

{code}
 var url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/query/";
{code}

{code}
 var params = {};
 params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
 params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(someQuery);
 gadgets.io.makeRequest(url, handler, params);
{code}


h2. Modification of document properties or content.

Update properties command has an PUT method. The URL is the same as for the reading properties, differs only HTTP method.
Body of the request must be an Atom document with the properties specified (see spec. 2.2.4.12 for details constructing document).

Setting content stream can be executed via PUT or POST. Content-type of the request must be an "multipart/form-data".

h3. Using java.

{code:language=java}
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.RequestEntity; 

 String url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/object/";
 url += obj_id;

 HttpClient client = new HttpClient();
 client.getHttpConnectionManager().
 getParams().setConnectionTimeout(10000);

 PostMethod post = new PostMethod(url);
 RequestEntity entity = new InputStreamRequestEntity(inputStream, "text/xml; charset=ISO-8859-1");
 post.setRequestEntity(entity); 

 try { 
 int result = client.executeMethod(post);
 final String strResponce = post.getResponseBodyAsString(); 
 } finally {
   post.releaseConnection();
 }
{code}

h3. Using javascript.

Update properties:

{code}
 var url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/object/";
 url += obj_id;
{code}

{code}

//constructing document
 String atomDoc = "<?xml version='1.0' encoding='utf-8'?>"
         + "<entry xmlns='http://www.w3.org/2005/Atom'"
         + " xmlns:cmis='" + CmisConstants.CMIS_NS_URI + "'"
         + " xmlns:cmisra='" + AtomCMIS.CMISRA_NS_URI + "'>"
         + "<title>title</title><summary>summary</summary>"
         + "<cmisra:object><cmis:properties>"
         + "<cmis:propertyId queryName="cmis:objectId" localName="rep-cmis:objectId" propertyDefinitionId="cmis:objectId">"
         + "<cmis:value>a3386ea0-0477-4a74-96bd-70d3da1c483a</cmis:value>"
         + "</cmis:propertyId>"
         + "</cmis:properties></cmisra:object></entry>";

 var params = {};
 params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.PUT;
 params[gadgets.io.RequestParameters.POST_DATA] = atomDoc;
 gadgets.io.makeRequest(url, handler, params);
{code}


Set content stream:

{code}
 var url = "http://localhost:8080/rest/private/cmisatom/";
 url += repository;
 url += "/file/";
 url += obj_id;
{code}

{code}
 var params = {};
 params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
 params[gadgets.io.RequestParameters.CONTENT_TYPE] = "multipart/form-data";
 params[gadgets.io.RequestParameters.POST_DATA] = contestStream;
 gadgets.io.makeRequest(url, handler, params);
{code}

