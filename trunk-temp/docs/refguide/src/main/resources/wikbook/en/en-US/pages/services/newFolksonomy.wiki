_Package org.exoplatform.services.cms.folksonomy.NewFolksonomyService_;

|| *Method* || *Return* || *Prototype* || *Description* ||
| *addPrivateTag* | {{void}} | {{addPrivateTag(String\[\] tagsName, Node documentNode, String repository, String workspace, String userName) throws Exception ;}} | Add a private tag to a document. A folksonomy link will be created in a tag node{example}{example}@param tagNames: Array of tag name as the children of tree{example}{example}@param documentNode:  Tagging this node by creating a folksonomy link to the node in tag{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@param userName: User name{example}{example}@throws Exception |
| *addGroupsTag* | {{void}} | {{addGroupsTag(String\[\] tagsName, Node documentNode,String repository, String workspace, String\[\] roles) throws Exception ; }} | Add a group tag to a document. A folksonomy link will be created in a tag node{example}{example}@param tagNames: Array of tag name as the children of tree{example}{example}@param documentNode:  Tagging this node by creating a folksonomy link to the node in tag{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@param roles: User roles{example}{example}@throws Exception |
|*addPublicTag* | {{void}} | {{addPublicTag(String treePath, String\[\] tagsName, Node documentNode, String repository, String workspace) throws Exception ;}} | Add a public tag to a document. A folksonomy link will be created in a tag node{example}{example}@param treePath:  Path of folksonomy tree{example}{example}@param tagNames:  Array of tag name as the children of tree{example}{example}@param documentNode:  Tagging this node by creating a folksonomy link to the node in tag{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@throws Exception |
| *addSiteTag* | {{void}}  | {{addSiteTag(String siteName, String\[\] tagsName, Node node, String repository, String workspace) throws Exception ;}} | Add a site tag to a document. A folksonomy link will be created in a tag node{example}{example}@param siteName:  Portal name{example}{example}@param treePath:  Path of folksonomy tree{example}{example}@param tagNames:  Array of tag name as the children of tree{example}{example}@param documentNode:  Tagging this node by creating a folksonomy link to  the node in tag{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@throws Exception |
| *getAllPrivateTags* | {{List<Node>}} | {{getAllPrivateTags(String userName, String repository, String workspace) throws Exception ;}} | Get all private tags{example}{example}@param userName:  User name{example}{example}@param repository: repository name{example}{example}@param workspace: Workspace name{example}{example}@return List<Node> |
| *getAllPublicTags* | {{List<Node>}} | {{getAllPublicTags(String treePath, String repository, String workspace) throws Exception ;}} | Get all public tags{example}{example}@param treePath:  Folksonomy tree path{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@return  List<Node>{example}{example}@throws Exception |
| *getAllGroupTags* | {{List<Node>}} | {{getAllGroupTags(String\[\] roles, String repository, String workspace) throws Exception ;}} | Get all tags by groups{example}{example}@param roles: Roles of user{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@return  List<Node>{example}{example}@throws Exception |
| *getAllGroupTags* | {{List<Node>}} | {{getAllGroupTags(String role, String repository, String workspace) throws Exception ;}} | Get all tags by group{example}{example}@param role: Role of user{example}{example}@param repository: Repository name{example}{example}@param workspace: Workspace name{example}{example}@return  List<Node>{example}{example}@throws Exception |
| *getAllSiteTags*| {{List<Node>}} | {{getAllSiteTags(String siteName, String repository, String workspace) throws Exception ;}} | Get all tags of Site{example}{example}@param siteName:  Portal name{example}{example}@param treePath:  Folksonomy tree path{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@return  List<Node>{example}{example}@throws Exception |
| *getAllDocumentsByTag* | {{List<Node>}} | {{getAllDocumentsByTag(String tagPath, String repository, String workspace, SessionProvider sessionProvider) throws Exception ;}} | Get all documents which are stored in a tag{example}{example}@param treeName:  Name of folksonomy tree{example}{example}@param tagName :  Name of tag{example}{example}@param repository: Repository name{example}{example}@return:  List of documents in tag{example}{example}@throws Exception |
| *getTagStyle* | {{String}} | {{getTagStyle(String tagPath, String repository, String workspace) throws Exception ;}} | Get HTML_STYLE_PROP property in styleName node in repository{example}{example}@param tagPath: Tag path{example}{example}@param workspace Workspace name  {example}{example}@param repository:  Repository name{example}{example}@return:  value of property of styleName node{example}{example}@throws Exception |
| *addTagStyle* | {{void}} | {{addTagStyle(String styleName, String tagRange, String htmlStyle, String repository, String workspace) throws Exception ;}} | Update the properties TAG_RATE_PROP and HTML_STYLE_PROP, following the values tagRate, htmlStyle{example}{example}for node in tagPath in repository{example}{example}@param styleName: Style name{example}{example}@param tagRate: The range of tag numbers{example}{example}@param htmlStyle: Tag style{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name{example}{example}@throws Exception |
| *updateTagStyle* | {{void}} | {{updateTagStyle(String styleName, String tagRange, String htmlStyle, String repository, String workspace) throws Exception ;}} | Update the properties TAG_RATE_PROP and HTML_STYLE_PROP, following  the value tagRate, htmlStyle{example}{example}for node in tagPath in repository{example}{example}@param styleName: Style name{example}{example}@param tagRate: The range of tag numbers{example}{example}@param htmlStyle Tag style{example}{example}@param repository  Repository name{example}{example}@param workspace: Workspace name{example}{example}@throws Exception |
| *getAllTagStyle* | {{List<Node>}} | {{getAllTagStyle(String repository, String workspace) throws Exception ;}} |  Get all tag style bases of folksonomy tree{example}{example}@param repository: Repository name{example}{example}@param workspace: Workspace name{example}{example}@return List<Node> List tag styles{example}{example}@throws Exception |
| *init* | {{void}} | {{init(String repository) throws Exception ;}} | Initialize all TagStylePlugin with session in repository name{example}{example}@param repository: repository name |
| *removeTagOfDocument* | {{void}} | {{removeTagOfDocument(String tagPath, Node document, String repository, String workspace) throws Exception;}} | Remove a tag of a given document{example}{example}@param treeName:  Name of folksonomy tree{example}{example}@param tagName: Name of tag{example}{example}@param document:  Document which is added a link to tagName{example}{example}@param repository:  Repository name{example}{example}@return{example}{example}@throws Exception |
| *removeTag* | {{void}} | {{removeTag(String tagPath, String repository, String workspace) throws Exception;}} | Remove tag{example}{example}@param tagPath: Path of tag{example}{example}@param repository:  Repository name{example}{example}@param workspace: Workspace name |
| *modifyTagName* | {{Node}} | {{modifyTagName(String tagPath, String newTagName, String repository, String workspace) throws Exception;}} | Modify tag name{example}{example}@param tagPath: Path of tag{example}{example}@param newTagName:  New tag name{example}{example}@param repository:  Repository name{example}{example}@param workspace Workspace name{example}{example}@return{example}{example}@throws Exception |
| *getLinkedTagsOfDocument* | {{List<Node>}} | {{getLinkedTagsOfDocument(Node documentNode, String repository, String workspace) throws Exception;}} | Get all tags linked to given document{example}{example}@param documentNode Document node{example}{example}@param repository: Repository name{example}{example}@param workspace: Workspace name{example}{example}@return {example}{example}@throws Exception|
| *getLinkedTagsOfDocumentByScope* | {{List<Node>}} | {{getLinkedTagsOfDocumentByScope(int scope, String value, Node documentNode, String repository, String workspace) throws Exception;}} | Get all tags linked to given document by scope{example}{example}@param documentNode: Document node{example}{example}@param repository: Repository name{example}{example}@param workspace  Workspace name{example}{example}@return {example}{example}@throws Exception |
| *removeTagsOfNodeRecursively* | {{void}} | {{removeTagsOfNodeRecursively(Node node, String repository, String workspace, String username, String groups) throws Exception; }} | Remove all tags linked to children of given node{example}{example}@param node{example}{example}@param repository{example}{example}@param workspace{example}{example}@throws Exception |
| *addTagPermission* | {{void}} | {{addTagPermission(String usersOrGroups);}} | Add given users or groups to tagPermissionList {example}{example}@param usersOrGroups |
| *removeTagPermission* | {{void}} | {{removeTagPermission(String usersOrGroups); }} | Remove given users or groups from tagPermissionList {example}{example}@param usersOrGroups |
| *getTagPermissionList* | {{List<String>}} | {{getTagPermissionList(); }} | Returns tagPermissionList |
| *canEditTag* | {{boolean}} | {{canEditTag(int scope, List<String> memberships);}} | Set the permission for a user to edit tag.{example}{example}@param scope: Scope{example}{example}@param memberships: Memberships{example}{example}@return true If it is possible |
| *getAllTagNames* | {{List<String>}} | {{getAllTagNames(String repository, String workspace, int scope, String value) throws Exception;}} | Get all tag names which start within a given scope{example}{example}@param repository: Repository{example}{example}@param workspace: Workspace{example}{example}@param scope: scope of tags{example}{example}@param value: value, according to scope, can be understood differently{example}{example}@return true if it is possiblee |

