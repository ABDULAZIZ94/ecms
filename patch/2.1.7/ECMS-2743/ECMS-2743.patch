Index: packaging/wcm/webapp/src/main/webapp/WEB-INF/conf/wcm-extension/wcm/publication-configuration.xml
===================================================================
--- packaging/wcm/webapp/src/main/webapp/WEB-INF/conf/wcm-extension/wcm/publication-configuration.xml	(revision 74506)
+++ packaging/wcm/webapp/src/main/webapp/WEB-INF/conf/wcm-extension/wcm/publication-configuration.xml	(working copy)
@@ -167,4 +167,14 @@
       <description>this listener will reinit the composer templates list when creating a new nodetype</description>
     </component-plugin>
   </external-component-plugins>
+  
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.listener.ListenerService</target-component>
+    <component-plugin>
+      <name>WebDavService.event.postUpload</name>
+      <set-method>addListener</set-method>
+      <type>org.exoplatform.services.wcm.publication.listener.post.PostWebDavUploadEventListener</type>
+      <description>this listener will change state of document to draft after uploading a file from webdav</description>
+    </component-plugin>
+  </external-component-plugins>
 </configuration>
Index: core/services/src/main/java/org/exoplatform/services/cms/webdav/WebDavServiceImpl.java
===================================================================
--- core/services/src/main/java/org/exoplatform/services/cms/webdav/WebDavServiceImpl.java	(revision 74506)
+++ core/services/src/main/java/org/exoplatform/services/cms/webdav/WebDavServiceImpl.java	(working copy)
@@ -17,11 +17,13 @@
 package org.exoplatform.services.cms.webdav;
 
 import java.io.InputStream;
-import java.util.List;
 
 import javax.jcr.Item;
 import javax.jcr.NoSuchWorkspaceException;
+import javax.jcr.Node;
 import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
 import javax.ws.rs.GET;
 import javax.ws.rs.HEAD;
 import javax.ws.rs.HeaderParam;
@@ -43,6 +45,7 @@
 import org.exoplatform.services.jcr.RepositoryService;
 import org.exoplatform.services.jcr.ext.app.ThreadLocalSessionProviderService;
 import org.exoplatform.services.jcr.webdav.util.TextUtil;
+import org.exoplatform.services.listener.ListenerService;
 import org.exoplatform.services.log.ExoLogger;
 import org.exoplatform.services.log.Log;
 import org.exoplatform.services.rest.ExtHttpHeaders;
@@ -59,6 +62,7 @@
 import org.exoplatform.services.rest.ext.webdav.method.UNCHECKOUT;
 import org.exoplatform.services.rest.ext.webdav.method.UNLOCK;
 import org.exoplatform.services.rest.ext.webdav.method.VERSIONCONTROL;
+import org.exoplatform.services.wcm.utils.WCMCoreUtils;
 
 /**
  * This class is used to override the default WebDavServiceImpl in order to support symlinks
@@ -76,14 +80,19 @@
    */
   private static Log log = ExoLogger.getLogger("cms.webdav.WebDavServiceImpl");
   
+  private final String POST_UPLOAD_CONTENT_EVENT = "WebDavService.event.postUpload";
+  
   private final NodeFinder nodeFinder;
   
+  private ListenerService listenerService;
+  
   public WebDavServiceImpl(InitParams params,
                            RepositoryService repositoryService,
                            ThreadLocalSessionProviderService sessionProviderService,
                            NodeFinder nodeFinder) throws Exception {
     super(params, repositoryService, sessionProviderService);
     this.nodeFinder = nodeFinder;
+    this.listenerService = WCMCoreUtils.getService(ListenerService.class);
   }
 
   private String getRealDestinationHeader(String baseURI, String repoName, String destinationHeader) {
@@ -350,9 +359,11 @@
                       @HeaderParam(ExtHttpHeaders.CONTENTTYPE) MediaType mediaType,
                       InputStream inputStream) {
 
+    Session session = null;
     try {
       Item item = nodeFinder.getItem(repoName, workspaceName(repoPath), LinkUtils.getParentPath(path(Text.escapeIllegalJcrChars(repoPath))), true);
       repoPath = item.getSession().getWorkspace().getName() + LinkUtils.createPath(item.getPath(), LinkUtils.getItemName(path(repoPath)));
+      session = item.getSession();
     } catch (PathNotFoundException exc) {
       return Response.status(HTTPStatus.NOT_FOUND).entity(exc.getMessage()).build();
     } catch (NoSuchWorkspaceException exc) {
@@ -361,7 +372,19 @@
       log.warn("Cannot find the item at " + repoName + "/" + repoPath, e);
       return Response.serverError().build();
     }
-    return super.put(repoName, repoPath, lockTokenHeader, ifHeader, null, nodeTypeHeader, mixinTypes, mediaType, inputStream);
+    Response res =  super.put(repoName, repoPath, lockTokenHeader, ifHeader, null, nodeTypeHeader, mixinTypes, mediaType, inputStream);
+    try {
+      Node currentNode = (Node) session.getItem(path(repoPath));
+      listenerService.broadcast(this.POST_UPLOAD_CONTENT_EVENT, this, currentNode);      
+    } catch (PathNotFoundException npfe) {
+      return Response.status(HTTPStatus.NOT_FOUND).entity(npfe.getMessage()).build();
+    } catch (RepositoryException re) {
+      return Response.status(HTTPStatus.NOT_FOUND).entity(re.getMessage()).build();
+    } catch (Exception e) {
+      return Response.serverError().build();
+    }
+
+    return res;
   }
 
   @REPORT
Index: core/publication/src/main/java/org/exoplatform/services/wcm/publication/listener/post/PostWebDavUploadEventListener.java
===================================================================
--- core/publication/src/main/java/org/exoplatform/services/wcm/publication/listener/post/PostWebDavUploadEventListener.java	(revision 0)
+++ core/publication/src/main/java/org/exoplatform/services/wcm/publication/listener/post/PostWebDavUploadEventListener.java	(revision 0)
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.services.wcm.publication.listener.post;
+
+import javax.jcr.Node;
+
+import org.exoplatform.services.cms.link.LinkManager;
+import org.exoplatform.services.jcr.webdav.WebDavService;
+import org.exoplatform.services.listener.Event;
+import org.exoplatform.services.listener.Listener;
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
+import org.exoplatform.services.wcm.publication.WCMPublicationService;
+import org.exoplatform.services.wcm.utils.WCMCoreUtils;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : eXoPlatform
+ *          hadv@exoplatform.com
+ * Oct 4, 2011  
+ */
+public class PostWebDavUploadEventListener extends Listener<WebDavService, Node> {
+
+  /** The pservice. */
+  private WCMPublicationService publicationService;
+  
+  private final static Log      LOG = ExoLogger.getLogger(PostWebDavUploadEventListener.class);
+
+  public PostWebDavUploadEventListener(WCMPublicationService publicationService) {
+    this.publicationService = publicationService;
+  }
+  
+  /* (non-Javadoc)
+   * @see org.exoplatform.services.listener.Listener#onEvent(org.exoplatform.services.listener.Event)
+   */
+  public void onEvent(Event<WebDavService, Node> event) throws Exception {
+    Node currentNode = null;
+
+    try {
+      currentNode = event.getData();
+      LinkManager linkMng = WCMCoreUtils.getService(LinkManager.class);
+      if (linkMng.isLink(currentNode)) {
+        currentNode = linkMng.getTarget(currentNode);
+      }
+
+      if (currentNode == null || currentNode.isNodeType("exo:cssFile")
+          || currentNode.isNodeType("exo:template") || currentNode.isNodeType("exo:jsFile")
+          || currentNode.isNodeType("exo:action")) {
+        return;
+      }
+
+      publicationService.updateLifecyleOnChangeContent(currentNode, "", currentNode.getSession()
+                                                                                   .getUserID());
+    } catch (Exception ex) {
+      LOG.error("An expected exception has occured: ", ex);
+    }
+  }
+
+}
