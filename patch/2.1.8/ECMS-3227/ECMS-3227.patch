Index: core/services/src/main/java/org/exoplatform/services/cms/impl/CmsServiceImpl.java
===================================================================
--- core/services/src/main/java/org/exoplatform/services/cms/impl/CmsServiceImpl.java	(revision 78558)
+++ core/services/src/main/java/org/exoplatform/services/cms/impl/CmsServiceImpl.java	(working copy)
@@ -561,11 +561,13 @@
     switch (requiredtype) {
     case PropertyType.STRING:
       if (value == null) {
-        if(isMultiple) {
-          node.setProperty(propertyName, new String[] {StringUtils.EMPTY});
-        } else {
-          node.setProperty(propertyName, StringUtils.EMPTY);
-        }
+        if (!node.hasProperty(propertyName)) {
+          if(isMultiple) {
+            node.setProperty(propertyName, new String[] {StringUtils.EMPTY});
+          } else {
+            node.setProperty(propertyName, StringUtils.EMPTY);
+          }
+        }        
       } else {
         if(isMultiple) {
           if (value instanceof String) {
@@ -580,7 +582,9 @@
       break;
     case PropertyType.BINARY:
       if (value == null) {
-        node.setProperty(propertyName, "");
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, "");
+        }
       } else if(value instanceof InputStream) {
         node.setProperty(propertyName, (InputStream)value);
       } else if (value instanceof byte[]) {
@@ -594,7 +598,9 @@
       break;
     case PropertyType.BOOLEAN:
       if (value == null) {
-        node.setProperty(propertyName, false);
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, false);
+        }
       } else if (value instanceof String) {
         node.setProperty(propertyName, 
             new Boolean((String) value).booleanValue());
@@ -606,7 +612,9 @@
       break;
     case PropertyType.LONG:
       if (value == null || "".equals(value)) {
-        node.setProperty(propertyName, 0);
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, 0);
+        }
       } else if (value instanceof String) {
         node.setProperty(propertyName, new Long((String) value).longValue());
       } else if (value instanceof String[]) {
@@ -617,7 +625,9 @@
       break;
     case PropertyType.DOUBLE:
       if (value == null || "".equals(value)) {
-        node.setProperty(propertyName, 0);
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, 0);
+        }
       } else if (value instanceof String) {
         node.setProperty(propertyName, new Double((String) value).doubleValue());
       } else if (value instanceof String[]) {
@@ -629,25 +639,27 @@
       break;
     case PropertyType.DATE:      
       if (value == null){
-        boolean mandatory = false;
-        for (PropertyDefinition propertyDef : node.getPrimaryNodeType().getPropertyDefinitions()) 
-          if (propertyName.equals(propertyDef.getName()) && propertyDef.isMandatory()) {
-            mandatory = true;
-            break;
-          }
-        for (NodeType mixin : node.getMixinNodeTypes()) {
-          for (PropertyDefinition propertyDef : mixin.getPropertyDefinitions()) {
+        if (!node.hasProperty(propertyName)) {
+          boolean mandatory = false;
+          for (PropertyDefinition propertyDef : node.getPrimaryNodeType().getPropertyDefinitions()) 
             if (propertyName.equals(propertyDef.getName()) && propertyDef.isMandatory()) {
               mandatory = true;
               break;
             }
+          for (NodeType mixin : node.getMixinNodeTypes()) {
+            for (PropertyDefinition propertyDef : mixin.getPropertyDefinitions()) {
+              if (propertyName.equals(propertyDef.getName()) && propertyDef.isMandatory()) {
+                mandatory = true;
+                break;
+              }
+            }
           }
+          if (mandatory) {
+            node.setProperty(propertyName, new GregorianCalendar());
+          } else {
+            node.setProperty(propertyName, (Value)null);
+          }
         }
-        if (mandatory) {
-          node.setProperty(propertyName, new GregorianCalendar());
-        } else {
-          node.setProperty(propertyName, (Value)null);
-        }
       } else {
         if (isMultiple) {
           Session session = node.getSession();
@@ -677,14 +689,16 @@
       break;
     case PropertyType.REFERENCE:      
       if (value == null) {
-        if (isMultiple) {
-          if (value instanceof String) {
+        if (!node.hasProperty(propertyName)) {
+          if (isMultiple) {
+            if (value instanceof String) {
+              node.setProperty(propertyName, "");
+            } else if (value instanceof String[]) {
+              node.setProperty(propertyName, new String[] {});          
+            }
+          } else {
             node.setProperty(propertyName, "");
-          } else if (value instanceof String[]) {
-            node.setProperty(propertyName, new String[] {});          
           }
-        } else {
-          node.setProperty(propertyName, "");
         }
       }
       if (value instanceof Value[]) {
@@ -786,11 +800,13 @@
     switch (requiredtype) {
     case PropertyType.STRING:
       if (value == null) {
-        if(isMultiple) {
-          node.setProperty(propertyName, new String[] {StringUtils.EMPTY});
-        } else {
-          node.setProperty(propertyName, StringUtils.EMPTY);
-        }
+        if (!node.hasProperty(propertyName)) {
+          if(isMultiple) {
+            node.setProperty(propertyName, new String[] {StringUtils.EMPTY});
+          } else {
+            node.setProperty(propertyName, StringUtils.EMPTY);
+          }
+        }        
       } else {
         if(isMultiple) {
           if (value instanceof String) {
@@ -809,7 +825,9 @@
       break;
     case PropertyType.BINARY:
       if (value == null) {
-        node.setProperty(propertyName, "");
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, "");
+        }
       } else if(value instanceof InputStream) {
         if(!property.getValue().getStream().equals(value)) {
           node.setProperty(propertyName, (InputStream)value);
@@ -830,7 +848,9 @@
       break;
     case PropertyType.BOOLEAN:
       if (value == null) {
-        node.setProperty(propertyName, false);
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, false);
+        }
       } else if (value instanceof Boolean) {
         node.setProperty(propertyName, ((Boolean) value).booleanValue());
       }else if (value instanceof String) {
@@ -845,7 +865,9 @@
       break;
     case PropertyType.LONG:
       if (value == null || "".equals(value)) {
-        node.setProperty(propertyName, 0);
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, 0);
+        }
       } else if (value instanceof String) {
         if(property.getValue().getLong() != new Long((String) value).longValue()) {
           node.setProperty(propertyName, new Long((String) value).longValue());
@@ -860,7 +882,9 @@
       break;
     case PropertyType.DOUBLE:
       if (value == null || "".equals(value)) {
-        node.setProperty(propertyName, 0);
+        if (!node.hasProperty(propertyName)) {
+          node.setProperty(propertyName, 0);
+        }
       } else if (value instanceof String) {
         if(property.getValue().getDouble() != new Double((String) value).doubleValue()) {
           node.setProperty(propertyName, new Double((String) value).doubleValue());
@@ -875,28 +899,30 @@
       break;
     case PropertyType.DATE:      
       if (value == null){
-        boolean mandatory = false;
-        for (PropertyDefinition propertyDef : node.getPrimaryNodeType().getPropertyDefinitions()) 
-          if (propertyName.equals(propertyDef.getName()) && propertyDef.isMandatory()) {
-            mandatory = true;
-            break;
-          }
-        for (NodeType mixin : node.getMixinNodeTypes()) {
-          for (PropertyDefinition propertyDef : mixin.getPropertyDefinitions()) {
+        if (!node.hasProperty(propertyName)) {
+          boolean mandatory = false;
+          for (PropertyDefinition propertyDef : node.getPrimaryNodeType().getPropertyDefinitions()) 
             if (propertyName.equals(propertyDef.getName()) && propertyDef.isMandatory()) {
               mandatory = true;
               break;
             }
+          for (NodeType mixin : node.getMixinNodeTypes()) {
+            for (PropertyDefinition propertyDef : mixin.getPropertyDefinitions()) {
+              if (propertyName.equals(propertyDef.getName()) && propertyDef.isMandatory()) {
+                mandatory = true;
+                break;
+              }
+            }
           }
+          if (mandatory) {
+            node.setProperty(propertyName, new GregorianCalendar());
+          } else {
+            if(isMultiple)
+              node.setProperty(propertyName, (Value[])null);
+            else
+              node.setProperty(propertyName, (Value)null);
+          }
         }
-        if (mandatory) {
-          node.setProperty(propertyName, new GregorianCalendar());
-        } else {
-          if(isMultiple)
-            node.setProperty(propertyName, (Value[])null);
-          else
-            node.setProperty(propertyName, (Value)null);
-        }
       } else {
         if(isMultiple) {
           Session session = node.getSession();
@@ -933,14 +959,16 @@
       break;
     case PropertyType.REFERENCE:      
       if (value == null) {
-        if (isMultiple) {
-          if (value instanceof String) {
+        if (!node.hasProperty(propertyName)) {
+          if (isMultiple) {
+            if (value instanceof String) {
+              node.setProperty(propertyName, "");
+            } else if (value instanceof String[]) {
+              node.setProperty(propertyName, new String[] {});
+            }
+          } else {
             node.setProperty(propertyName, "");
-          } else if (value instanceof String[]) {
-            node.setProperty(propertyName, new String[] {});
           }
-        } else {
-          node.setProperty(propertyName, "");
         }
       }
       if (value instanceof Value[]) {
