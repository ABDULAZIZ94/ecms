Index: core/services/src/test/java/org/exoplatform/services/wcm/skin/TestXSkinService.java
===================================================================
--- core/services/src/test/java/org/exoplatform/services/wcm/skin/TestXSkinService.java	(revision 79242)
+++ core/services/src/test/java/org/exoplatform/services/wcm/skin/TestXSkinService.java	(working copy)
@@ -242,7 +242,7 @@
 			skinService.updatePortalSkinOnModify(portal, cssNode);
 			session.save();
 			String cssData = configService.getMergedCSS("/portal/css/jcr/classic/Default/Stylesheet.css");
-			assertEquals("This is the default.css file.", cssData);
+			assertEquals("This is the default.css file.This is the sharedJsFile.css file.", cssData);
 		} catch(Exception e) {
 			fail();
 		}
@@ -264,7 +264,7 @@
 			skinService.updatePortalSkinOnModify(portal, cssNode);
 			session.save();
 			String cssData = configService.getMergedCSS("/portal/css/jcr/classic/Default/Stylesheet.css");
-			assertEquals("This is the default.css file.", cssData);
+			assertEquals("This is the default.css file.This is the sharedJsFile.css file.", cssData);
 		} catch(Exception e) {
 			fail();
 		}
@@ -331,7 +331,7 @@
 			skinService.updatePortalSkinOnRemove(portal, cssNode);
 			session.save();
 			String cssData = configService.getMergedCSS("/portal/css/jcr/classic/Default/Stylesheet.css");
-			assertEquals("", cssData);
+			assertEquals("This is the sharedJsFile.css file.", cssData);
 		} catch(Exception e) {
 			fail();
 		}
@@ -345,7 +345,7 @@
 		try {
 			Node portal = findPortalNode(sessionProvider, documentNode);
 			SkinService configService = null;
-			Node webcontent = createWebcontentNode(documentNode, WEB_CONTENT_NODE_NAME, null, "Test XSkin Service", null);
+			Node webcontent = createWebcontentNode(documentNode, WEB_CONTENT_NODE_NAME, null, "Test XSkin Service.", null);
       Node cssNode = webcontent.getNode("css").getNode("default.css");
       createSharedCssNode(sharedCssNode);
 			configService = getService(SkinService.class);
@@ -354,7 +354,7 @@
 			session.save();
 
 			String cssData = configService.getMergedCSS("/portal/css/jcr/classic/Default/Stylesheet.css");
-			assertEquals("Test XSkin Service", cssData);
+			assertEquals("Test XSkin Service.This is the sharedJsFile.css file.", cssData);
 		} catch(Exception e) {
 			fail();
 		}
@@ -368,7 +368,7 @@
     try {
       Node portal = findPortalNode(sessionProvider, documentNode);
       SkinService configService = null;
-      Node webcontent = createWebcontentNode(documentNode, WEB_CONTENT_NODE_NAME, null, "Test XSkin Service", null);
+      Node webcontent = createWebcontentNode(documentNode, WEB_CONTENT_NODE_NAME, null, "Test XSkin Service.", null);
       Node cssNode = webcontent.getNode("css").getNode("default.css");
       createSharedCssNode(sharedCssNode);
       Node sharedNode = sharedCssNode.getNode("sharedJsFile.css");
@@ -380,7 +380,7 @@
       session.save();
 
       String cssData = configService.getMergedCSS("/portal/css/jcr/classic/Default/Stylesheet.css");
-      assertEquals("This is the default.css file.", cssData);
+      assertEquals("This is the sharedJsFile.css file.Test XSkin Service.", cssData);
     } catch(Exception e) {
       fail();
     }
@@ -398,7 +398,7 @@
       Node portal = livePortalManagerService.getLivePortal(sessionProvider, sharedPortalName);
       SkinService configService = getService(SkinService.class);
       configService.addSkin("", "Default", "", "");
-      Node webcontent = createWebcontentNode(documentNode, WEB_CONTENT_NODE_NAME, null, "Test XSkin Service", null);
+      Node webcontent = createWebcontentNode(documentNode, WEB_CONTENT_NODE_NAME, null, "Test XSkin Service.", null);
       Node cssNode = webcontent.getNode("css").getNode("default.css");
       Node sharedNode = (Node) session.getItem("/sites content/live/" + sharedPortalName + "/css");
       createSharedCssNode(sharedNode);
@@ -406,7 +406,7 @@
       session.save();
 
       String cssData = configService.getMergedCSS("/portal/css/jcr/" + sharedPortalName + "/Default/Stylesheet.css");
-      assertEquals("Test XSkin Service", cssData);
+      assertEquals("Test XSkin Service.This is the sharedJsFile.css file.", cssData);
     } catch(Exception e) {
       fail();
     }
@@ -465,7 +465,7 @@
     cssContent.setProperty("jcr:encoding", "UTF-8");
     cssContent.setProperty("jcr:mimeType", "text/css");
     cssContent.setProperty("jcr:lastModified", new Date().getTime());
-    String cssData = "This is the default.css file.";
+    String cssData = "This is the sharedJsFile.css file.";
     cssContent.setProperty("jcr:data", cssData);
     session.save();
   }
Index: core/services/src/test/java/org/exoplatform/services/wcm/javascript/TestXJavaScriptService.java
===================================================================
--- core/services/src/test/java/org/exoplatform/services/wcm/javascript/TestXJavaScriptService.java	(revision 79242)
+++ core/services/src/test/java/org/exoplatform/services/wcm/javascript/TestXJavaScriptService.java	(working copy)
@@ -371,7 +371,7 @@
 		    configService.writeMergedJavascript(baos);
 		    baos.close();
 		    String jsData = baos.toString("UTF-8");
-			assertEquals("", jsData);
+			assertEquals("This is the sharedJsFile.js file.", jsData);
 		} catch(Exception e) {
 			fail();
 		}
@@ -583,7 +583,7 @@
     jsContent.setProperty("jcr:encoding", "UTF-8");
     jsContent.setProperty("jcr:mimeType", "text/javascript");
     jsContent.setProperty("jcr:lastModified", new Date().getTime());
-    String jsData = "This is the default.js file.";
+    String jsData = "This is the sharedJsFile.js file.";
     jsContent.setProperty("jcr:data", jsData);
     session.save();
   }
Index: core/services/src/main/java/org/exoplatform/services/wcm/skin/XSkinService.java
===================================================================
--- core/services/src/main/java/org/exoplatform/services/wcm/skin/XSkinService.java	(revision 79242)
+++ core/services/src/main/java/org/exoplatform/services/wcm/skin/XSkinService.java	(working copy)
@@ -21,7 +21,10 @@
 
 import javax.jcr.Node;
 import javax.jcr.NodeIterator;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
 import javax.jcr.Session;
+import javax.jcr.ValueFormatException;
 import javax.jcr.query.Query;
 import javax.jcr.query.QueryManager;
 import javax.jcr.query.QueryResult;
@@ -50,9 +53,9 @@
 public class XSkinService implements Startable {    
   
   /** The SHARE d_ cs s_ query. */
-  private static String SHARED_CSS_QUERY = "select * from exo:cssFile where jcr:path like '{path}/%' and exo:active='true' and exo:sharedCSS='true' order by exo:priority DESC".intern();  
+  private static String SHARED_CSS_QUERY = "select * from exo:cssFile where jcr:path like '{path}/%' and exo:active='true' and exo:sharedCSS='true' and jcr:mixinTypes <> 'exo:restoreLocation' order by exo:priority ASC".intern();
   
-  private static String WEBCONTENT_CSS_QUERY = "select * from exo:cssFile where jcr:path like '{path}/%' and exo:active='true' order by exo:priority DESC".intern();
+  private static String WEBCONTENT_CSS_QUERY = "select * from exo:cssFile where jcr:path like '{path}/%' and exo:active='true' order by exo:priority ASC".intern();
   
   /** The Constant SKIN_PATH_REGEXP. */
   public final static String SKIN_PATH_REGEXP = "/(.*)/css/jcr/(.*)/(.*)/(.*).css".intern();  
@@ -112,7 +115,7 @@
   	
   	// Need re-login to get session because this node is get from template and the session is not live anymore.
   	// If node is version (which is stored in system workspace) we have to login to system workspace to get data 
-  	NodeLocation webcontentLocation = NodeLocation.make(webcontent);
+  	NodeLocation webcontentLocation = NodeLocation.getNodeLocationByNode(webcontent);
   	ManageableRepository repository = repositoryService.getRepository(webcontentLocation.getRepository());
   	Session session = null;
   	try {
@@ -240,7 +243,7 @@
   	Node cssFolder = schemaConfigService.getWebSchemaHandlerByType(PortalFolderSchemaHandler.class).getCSSFolder(portalNode);
   	String statement = StringUtils.replaceOnce(SHARED_CSS_QUERY, "{path}", cssFolder.getPath());
     SessionProvider sessionProvider = SessionProvider.createSystemProvider();
-    NodeLocation portalNodeLocation = NodeLocation.make(portalNode);
+    NodeLocation portalNodeLocation = NodeLocation.getNodeLocationByNode(portalNode);
     ManageableRepository repository = repositoryService.getRepository(portalNodeLocation.getRepository());
     Session session = sessionProvider.getSession(portalNodeLocation.getWorkspace(), repository);
   	try {
@@ -254,26 +257,35 @@
   	      Node registeredCSSFile = iterator.nextNode();
   	      buffer.append(registeredCSSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString()) ;
   	    }
-  	  } else {
-  	    boolean isAdded = false;
-  	    while(iterator.hasNext()) {
-  	      Node registeredCSSFile = iterator.nextNode();
-  	      // Add new
-  	      long newCSSFilePriority = newCSSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
-  	      long registeredCSSFilePriority = registeredCSSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
-  	      if (!isAdded && newCSSFilePriority < registeredCSSFilePriority) {
-  	        buffer.append(newCSSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString());
-  	        isAdded = true;
-  	        continue;
-  	      }
-  	      // Modify
-  	      if (newCSSFile.getPath().equals(registeredCSSFile.getPath())) {
-  	        buffer.append(newCSSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString()) ;
-  	        continue;
-  	      }
-  	      buffer.append(registeredCSSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString()) ;
-  	    }  		
-  	  }
+  	  } else if (!iterator.hasNext()) {
+  		buffer.append(getActivedCSSData(newCSSFile));
+	  } else {      
+	    boolean isApplied = false;
+	    while(iterator.hasNext()) {
+	    
+	      Node registeredCSSFile = iterator.nextNode();
+	      if (newCSSFile != null) {
+	        // Modify
+	        if (!isApplied && newCSSFile.getPath().equals(registeredCSSFile.getPath())) {
+	          buffer.append(getActivedCSSData(newCSSFile));
+	          isApplied = true;
+	          continue;
+	        }
+	      
+	        // Add new
+	        long newCSSFilePriority = newCSSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
+	        long registeredCSSFilePriority = registeredCSSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
+	        if (!isApplied && newCSSFilePriority < registeredCSSFilePriority) {
+	          buffer.append(getActivedCSSData(newCSSFile));
+	          isApplied = true;
+	        }
+	      }
+	      buffer.append(getActivedCSSData(registeredCSSFile));
+	    }     
+	    if (!isApplied) {
+	      buffer.append(getActivedCSSData(newCSSFile));
+	    }
+	  }
   	} catch(Exception e) {
   	  log.error("Unexpected problem happen when merge CSS data", e);
   	} finally {
@@ -281,6 +293,19 @@
   	}
     return buffer.toString();     
   }  
+  
+  private String getActivedCSSData(Node cssFile) throws ValueFormatException, RepositoryException, PathNotFoundException {
+    if (cssFile != null && !cssFile.isNodeType("exo:restoreLocation")
+    		&& cssFile.hasNode(NodetypeConstant.JCR_CONTENT)
+    		&& cssFile.getNode(NodetypeConstant.JCR_CONTENT).hasProperty(NodetypeConstant.JCR_DATA)
+    		&& cssFile.hasProperty(NodetypeConstant.EXO_ACTIVE)
+    		&& cssFile.getProperty(NodetypeConstant.EXO_ACTIVE).getBoolean() == true) {
+	   
+	  return cssFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA)
+	  				.getString();
+	}
+	return "";
+  }
 
   /* (non-Javadoc)
    * @see org.picocontainer.Startable#start()
Index: core/services/src/main/java/org/exoplatform/services/wcm/javascript/XJavascriptService.java
===================================================================
--- core/services/src/main/java/org/exoplatform/services/wcm/javascript/XJavascriptService.java	(revision 79242)
+++ core/services/src/main/java/org/exoplatform/services/wcm/javascript/XJavascriptService.java	(working copy)
@@ -21,7 +21,9 @@
 import javax.jcr.Node;
 import javax.jcr.NodeIterator;
 import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
 import javax.jcr.Session;
+import javax.jcr.ValueFormatException;
 import javax.jcr.query.Query;
 import javax.jcr.query.QueryManager;
 import javax.jcr.query.QueryResult;
@@ -52,7 +54,7 @@
 public class XJavascriptService implements Startable {
 
   /** The SHARE d_ j s_ query. */
-  private static String SHARED_JS_QUERY = "select * from exo:jsFile where jcr:path like '{path}/%' and exo:active='true' and exo:sharedJS='true' order by exo:priority ASC".intern();
+	private static String SHARED_JS_QUERY = "select * from exo:jsFile where jcr:path like '{path}/%' and exo:active='true' and exo:sharedJS='true' and jcr:mixinTypes <> 'exo:restoreLocation' order by exo:priority ASC".intern();
   
   private static String WEBCONTENT_JS_QUERY = "select * from exo:jsFile where jcr:path like '{path}/%' and exo:active='true' order by exo:priority ASC".intern();
   
@@ -109,7 +111,7 @@
   	String jsQuery = StringUtils.replaceOnce(WEBCONTENT_JS_QUERY, "{path}", webcontent.getPath());
   	
   	// Need re-login to get session because this node is get from template and the session is not live anymore.
-  	NodeLocation webcontentLocation = NodeLocation.make(webcontent);
+  	NodeLocation webcontentLocation = NodeLocation.getNodeLocationByNode(webcontent);
   	RepositoryService repositoryService = WCMCoreUtils.getService(RepositoryService.class);
   	ManageableRepository repository = repositoryService.getRepository(webcontentLocation.getRepository());
   	Session session = null;
@@ -214,7 +216,7 @@
   	String statement = StringUtils.replaceOnce(SHARED_JS_QUERY, "{path}", jsFolder.getPath());
   	RepositoryService repositoryService = WCMCoreUtils.getService(RepositoryService.class);
   	SessionProvider sessionProvider = SessionProvider.createSystemProvider();
-  	NodeLocation portalNodeLocation = NodeLocation.make(portalNode);
+  	NodeLocation portalNodeLocation = NodeLocation.getNodeLocationByNode(portalNode);
   	ManageableRepository repository = repositoryService.getRepository(portalNodeLocation.getRepository());
   	Session session = sessionProvider.getSession(portalNodeLocation.getWorkspace(), repository);
   	QueryManager queryManager = session.getWorkspace().getQueryManager();
@@ -228,29 +230,51 @@
     		Node registeredJSFile = iterator.nextNode();
     		buffer.append(registeredJSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString()) ;
     	}
-  	} else {
-  		boolean isAdded = false;
-    	while(iterator.hasNext()) {
-    		Node registeredJSFile = iterator.nextNode();
-    		// Add new
-    		long newJSFilePriority = newJSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
-    		long registeredJSFilePriority = registeredJSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
-    		if (!isAdded && newJSFilePriority < registeredJSFilePriority) {
-    			buffer.append(newJSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString());
-    			isAdded = true;
-    			continue;
-    		}
-    		// Modify
-    		if (newJSFile.getPath().equals(registeredJSFile.getPath())) {
-    			buffer.append(newJSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString()) ;
-    			continue;
-    		}
-    		buffer.append(registeredJSFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA).getString()) ;
-    	}	
+  	} else if (!iterator.hasNext()) {
+  		buffer.append(getActivedJSData(newJSFile));
+  	} else {      
+  	    boolean isApplied = false;
+  		while(iterator.hasNext()) {  		  
+  		  Node registeredJSFile = iterator.nextNode();
+  		  if (newJSFile != null) {
+  		    // Modify
+  		    if (!isApplied && newJSFile.getPath().equals(registeredJSFile.getPath())) {
+  		      buffer.append(getActivedJSData(newJSFile));
+  		      isApplied = true;
+  		      continue;
+  		    }
+  		    
+  		    // Add new
+  		    long newJSFilePriority = newJSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
+  		    long registeredJSFilePriority = registeredJSFile.getProperty(NodetypeConstant.EXO_PRIORITY).getLong();
+  		    if (!isApplied && newJSFilePriority < registeredJSFilePriority) {
+  		      buffer.append(getActivedJSData(newJSFile));
+  		      isApplied = true;
+  		    }
+  		  }
+  		  
+  		  buffer.append(getActivedJSData(registeredJSFile));
+  		}     
+  		if (!isApplied) {
+  		  buffer.append(getActivedJSData(newJSFile));
+  		}
   	}
   	sessionProvider.close();
     return buffer.toString();    
   }
+  
+  private String getActivedJSData(Node jsFile) throws ValueFormatException, RepositoryException, PathNotFoundException {
+	  if (jsFile != null && !jsFile.isNodeType("exo:restoreLocation")
+	      && jsFile.hasNode(NodetypeConstant.JCR_CONTENT)
+	      && jsFile.getNode(NodetypeConstant.JCR_CONTENT).hasProperty(NodetypeConstant.JCR_DATA)
+	      && jsFile.hasProperty(NodetypeConstant.EXO_ACTIVE)
+	      && jsFile.getProperty(NodetypeConstant.EXO_ACTIVE).getBoolean() == true) {
+	   
+	    return jsFile.getNode(NodetypeConstant.JCR_CONTENT).getProperty(NodetypeConstant.JCR_DATA)
+	        .getString();
+	  }
+	  return "";
+  }
 
   /* (non-Javadoc)
    * @see org.picocontainer.Startable#start()
Index: core/services/src/main/java/org/exoplatform/services/wcm/core/impl/WebSchemaModificationAction.java
===================================================================
--- core/services/src/main/java/org/exoplatform/services/wcm/core/impl/WebSchemaModificationAction.java	(revision 79242)
+++ core/services/src/main/java/org/exoplatform/services/wcm/core/impl/WebSchemaModificationAction.java	(working copy)
@@ -26,6 +26,7 @@
 import org.exoplatform.services.jcr.ext.common.SessionProvider;
 import org.exoplatform.services.log.ExoLogger;
 import org.exoplatform.services.log.Log;
+import org.exoplatform.services.wcm.core.NodetypeConstant;
 import org.exoplatform.services.wcm.core.WebSchemaConfigService;
 import org.exoplatform.services.wcm.utils.WCMCoreUtils;
 /**
@@ -39,20 +40,37 @@
   public boolean execute(Context context) throws Exception {
     Property property = (Property)context.get("currentItem");
     String propertyName = property.getName();
-    if(!propertyName.equals("jcr:data"))
-      return propertyName.equalsIgnoreCase("exo:active");//use exo:active in case of exo:cssFile or exo:jsFile
+    if (!propertyName.equals("jcr:data") && !propertyName.equals(NodetypeConstant.EXO_PRIORITY)
+        && !propertyName.equals(NodetypeConstant.EXO_ACTIVE)
+        && !propertyName.equals("exo:restorePath")) {
+
+      // use exo:active in case of exo:cssFile or exo:jsFile
+      return propertyName.equalsIgnoreCase("exo:active");
+    }
     Node grandParent = property.getParent().getParent();
-    if(!grandParent.getPrimaryNodeType().getName().equals("nt:file")) 
-      return false;        
+    if (propertyName.equals("jcr:data")
+        && !grandParent.getPrimaryNodeType().getName().equals("nt:file"))
+      return false;    
     ExoContainer container = ExoContainerContext.getCurrentContainer();
     WebSchemaConfigService schemaConfigService = 
       (WebSchemaConfigService) container.getComponentInstanceOfType(WebSchemaConfigService.class);
     SessionProvider sessionProvider = WCMCoreUtils.getSystemSessionProvider();
-    try {            
-      schemaConfigService.updateSchemaOnModify(sessionProvider, grandParent);
-    } catch (Exception e) { 
-      log.error("Error when update schema when modify node: "+grandParent.getPath(), e);
-    }       
+    Node node = null;
+    if (propertyName.equals("jcr:data")) {
+      node = grandParent;
+    } else {
+      node = property.getParent();
+    }
+
+    try {
+      if (propertyName.equals("exo:restorePath")) {
+        schemaConfigService.updateSchemaOnRemove(sessionProvider, node);
+      } else {
+        schemaConfigService.updateSchemaOnModify(sessionProvider, node);
+      }
+    } catch (Exception e) {
+      log.error("Error when update schema when modify node: " + grandParent.getPath(), e);
+    }    
     return true;    
   }
 
