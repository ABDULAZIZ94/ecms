Index: ext/authoring/services/src/main/java/org/exoplatform/services/wcm/extensions/publication/lifecycle/authoring/ui/UIPublicationPanel.java
===================================================================
--- ext/authoring/services/src/main/java/org/exoplatform/services/wcm/extensions/publication/lifecycle/authoring/ui/UIPublicationPanel.java	(revision 67060)
+++ ext/authoring/services/src/main/java/org/exoplatform/services/wcm/extensions/publication/lifecycle/authoring/ui/UIPublicationPanel.java	(working copy)
@@ -21,6 +21,7 @@
 import java.util.HashMap;
 import java.util.List;
 
+import javax.jcr.ItemExistsException;
 import javax.jcr.Node;
 
 import org.apache.commons.logging.Log;
@@ -63,6 +64,7 @@
     @EventConfig(listeners = UIPublicationPanel.RestoreVersionActionListener.class),
     @EventConfig(listeners = UIPublicationPanel.SeeAllVersionActionListener.class),
     @EventConfig(listeners = UIPublicationPanel.SaveActionListener.class),
+    @EventConfig(listeners = UIPublicationPanel.ResetActionListener.class),
     @EventConfig(listeners = UIPublicationPanel.CloseActionListener.class) })
 public class UIPublicationPanel extends org.exoplatform.services.wcm.publication.lifecycle.stageversion.ui.UIPublicationPanel {
 	  final static public String OBJECTID = "objectId";
@@ -81,7 +83,7 @@
   public UIPublicationPanel() throws Exception {
     addUIFormInput(new UIFormDateTimeInput(START_PUBLICATION, START_PUBLICATION, null));
     addUIFormInput(new UIFormDateTimeInput(END_PUBLICATION, END_PUBLICATION, null));
-    setActions(new String[] { "Save", "Close" });
+    setActions(new String[] { "Save","Reset", "Close" });
   }
 
   public void init(Node node) throws Exception {
@@ -169,27 +171,45 @@
       Calendar endDate = endPublication.getCalendar();
       Node node = publicationPanel.getCurrentNode();
       try {
-        if (!"".equals(startPublication.getValue())) {
-          startDate.getTime();
-          node.setProperty(AuthoringPublicationConstant.START_TIME_PROPERTY, startDate);
-          node.getSession().save();
-        }
-        if (!"".equals(endPublication.getValue())) {
-          endDate.getTime();
-          node.setProperty(AuthoringPublicationConstant.END_TIME_PROPERTY, endDate);
-          node.getSession().save();
-        }
+    	  if ((!"".equals(startPublication.getValue()))||(!"".equals(endPublication.getValue()))){ 
+    		  if (!"".equals(startPublication.getValue())) 
+    	          node.setProperty(AuthoringPublicationConstant.START_TIME_PROPERTY, startDate);        
+    	      if (!"".equals(endPublication.getValue()))  
+    	          node.setProperty(AuthoringPublicationConstant.END_TIME_PROPERTY, endDate);          
+    	      node.getSession().save();
+    	  }      
       } catch (NullPointerException e) {
         UIApplication uiApp = publicationPanel.getAncestorOfType(UIApplication.class);
         uiApp.addMessage(new ApplicationMessage("UIPublicationPanel.msg.invalid-format", null));
         event.getRequestContext().addUIComponentToUpdateByAjax(uiApp.getUIPopupMessages());
         return;
+      }catch (ItemExistsException iee){
+    	  LOG.error("Error when adding properties to node");    	 
       }
       UIPopupContainer uiPopupContainer = (UIPopupContainer) publicationPanel.getAncestorOfType(UIPopupContainer.class);
       uiPopupContainer.deActivate();
       event.getRequestContext().addUIComponentToUpdateByAjax(uiPopupContainer);
     }
   }
+  
+  public static class ResetActionListener extends EventListener<UIPublicationPanel> {
+	    public void execute(Event<UIPublicationPanel> event) throws Exception {
+	    	UIPublicationPanel publicationPanel = event.getSource();
+	    	Node node = publicationPanel.getCurrentNode();
+	    	UIFormDateTimeInput startPublication = publicationPanel.getChildById(START_PUBLICATION);
+	    	startPublication.setCalendar(null);
+	    	if (node.hasProperty(AuthoringPublicationConstant.START_TIME_PROPERTY)){
+	    		node.getProperty(AuthoringPublicationConstant.START_TIME_PROPERTY).remove();
+	    		node.save();
+	    	}	    		
+	        UIFormDateTimeInput endPublication = publicationPanel.getChildById(END_PUBLICATION);
+	        endPublication.setCalendar(null);
+	        if (node.hasProperty(AuthoringPublicationConstant.END_TIME_PROPERTY)){
+	        	node.getProperty(AuthoringPublicationConstant.END_TIME_PROPERTY).remove();
+	        	node.save();
+	        }	        
+	    }
+  }
 
   public List<State> getStates(Node cNode) throws Exception {
     List<State> states = new ArrayList<State>();
