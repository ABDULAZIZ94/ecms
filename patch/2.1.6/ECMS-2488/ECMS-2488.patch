Index: core/services/src/main/java/org/exoplatform/services/wcm/core/NodeLocation.java
===================================================================
--- core/services/src/main/java/org/exoplatform/services/wcm/core/NodeLocation.java	(revision 71849)
+++ core/services/src/main/java/org/exoplatform/services/wcm/core/NodeLocation.java	(working copy)
@@ -134,7 +134,7 @@
    * @return a NodeLocation object
    */
   public static final NodeLocation parse(final String exp) {
-    String[] temp = exp.split(":");
+    String[] temp = split(exp, ":");
     if (temp.length == 3 && temp[2].indexOf("/") == 0) {
       return new NodeLocation(temp[0], temp[1], temp[2]);
     } else {
@@ -177,7 +177,7 @@
    * @return a NodeLocation object
    */
   public static final NodeLocation getNodeLocationByExpression(final String exp) {
-    String[] temp = exp.split(":");
+    String[] temp = split(exp, ":");
     if (temp.length >= 3 && temp[2].indexOf("/") == 0) {
       String repository = temp[0];
       String workspace = temp[1];
@@ -285,5 +285,28 @@
     buffer.append(":");
     buffer.append(path);
     return buffer.toString();  
-  }   
+  }
+
+  /**
+   * Split string to array of strings
+   * @param s input string
+   * @param split character
+   * @return output array of strings
+   */
+  private static final String[] split(String s, String ch) {
+    String[] ss = new String[3];
+    int prev = 0;
+    int i=0;
+    while(true) {
+      int next = s.indexOf(ch, prev);
+      if (next==-1) {
+        ss[i] = s.substring(prev);
+        break;
+      }
+      ss[i++] = s.substring(prev, next);
+      prev = next+1;
+    }
+
+    return ss;
+  }
 }
