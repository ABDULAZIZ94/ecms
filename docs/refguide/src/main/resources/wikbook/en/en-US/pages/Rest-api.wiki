h1. ThumbnailRESTService {anchor:id=CONTref.Devref.PublicRestAPIs.ThumnailRestService}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
| *ThumbnailRESTService* | {{ {noformat}{portalname}/{restcontextname}/thumbnailImage/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-services{noformat} }}  |Return a responding data as a thumbnail image. |

{note}
* {noformat}{portalname}{noformat}: The name of the portal.
* {noformat}{restcontextname}{noformat}: The context name of rest webapplication which is deployed to the "{noformat}{portalname}{noformat}" portal.
{note}

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getThumbnailImage* |{{ {noformat}{portalname}/{restcontextname}/thumbnailImage/medium/{repoName}/{workspaceName}/{nodePath}/{noformat} }} |repoName {example}{example}workspaceName{example}{example}nodePath |String {example}{example}{{string}} {example}{example}{{string}}|Return an image with the medium size (64x64).|
|*getLargeImage* |{{ {noformat}{portalname}/{restcontextname}/thumbnailImage/large/{repoName}/{workspaceName}/{nodePath}/{noformat} }}|repoName {example}{example}workspaceName{example}{example}nodePath |String {example}{example}{{string}} {example}{example}{{string}}  |Return an image with the large size (300x300).|
|*getSmallImage* |{{ {noformat}{portalname}/{restcontextname}/thumbnailImage/small/{repoName}/{workspaceName}/{nodePath}/{noformat} }}|repoName {example}{example}workspaceName{example}{example}nodePath |String {example}{example}{{string}} {example}{example}{{string}} |Return an image with the small size (32x32).|
|*getCustomImage* |{{ {noformat}{portalname}/{restcontextname}/thumbnailImage/custom/{size} }}/{repoName}/{workspaceName}/{nodePath}/{noformat} }}|size{example}{example}repoName {example}{example}workspaceName{example}{example}nodePath |String {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} |Return an image with the custom size.|
|*getOriginImage* |{{ {noformat}{portalname}/{restcontextname}/thumbnailImage/origin/{repoName}/{workspaceName}/{nodePath}/{noformat} }}|repoName {example}{example}workspaceName{example}{example}nodePath |String {example}{example}{{string}} {example}{example}{{string}} |Return an image with the original size.|

h1. RssConnector     {anchor:id=CONTref.Devref.PublicRestAPIs.RssConnector}

|| *Service name* || *Service URL* || *Location* || *Description* ||
|*RssConnector*|{{ {noformat}{portalname}/{restcontextname}/feed/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-connector{noformat} }}|Generate an RSS feed.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*generate*|{{ {noformat}{portalname}/{restcontextname}/feed/rss/{noformat} }}|{{repository}}{example}{example}{{workspace}}{example}{example}{{server}}{example}{example}{{siteName}}{example}{example}{{title}}{example}{example}{{desc}}{example}{example}{{folderPath}}{example}{example}{{orderBy}}{example}{example}{{orderType}}{example}{example} {{lang}}{example}{example}{{detailPage}}{example}{example}{{detailParam}}{example}{example}{{recursive}}|{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}}{example}{example} {{string}}|Generate an RSS feed.|

h1. FCKCoreRESTConnector {anchor:id=CONTref.Devref.PublicRestAPIs.FCKCoreRESTConnector}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*FCKCoreRESTConnector*|{{ {noformat}{portalname}/{restcontextname}//fckconnector/jcr/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-connector{noformat} }} |Get a list of files and folders, and create a folder and upload files.|

* *APIs usage*:  
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getFoldersAndFiles*|{{ {noformat}{portalname}/{restcontextname}/fckconnector/jcr/getFoldersAndFiles/{repositoryName}/{workspaceName}/{currentFolder}/{command}/{type}/{noformat} }} | {{repositoryName}}{example}{example}{{workspaceName}} {example}{example}{{currentFolder}} {example}{example}{{command}} {example}{example}{{type}}| {{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}}|Return the folders and the files in the current folder.|
|*createFolder*|{{ {noformat}{portalname}/{restcontextname}/fckconnector/jcr/createFolder/{repositoryName}/{workspaceName}/{currentFolder}/{newFolderName}/{language}/{noformat} }} | {{repositoryName}}{example}{example}{{workspaceName}}{example}{example}{{currentFolder}} {example}{example}{{newFolderName}} {example}{example}{{language}}| {{string}} {example}{example}{{string}} {example}{example} {{string}}{example}{example}{{string}} {example}{example}{{string}}| Create a folder under the current folder.|
|*uploadFile*|{{ {noformat}{portalname}/{restcontextname}/fckconnector/jcr/uploadFile/upload/{noformat} }}|{{servletRequest}}|{{HttpServletRequest}}| Uploads a file with the _HttpServletRequest_.|
|*processUpload *|{{ {noformat}{portalname}/{restcontextname}/fckconnector/jcr/uploadFile/control/{repositoryName}/{workspaceName}/{currentFolder}/{action}/{language}/{fileName}/{uploadId}/{noformat} }} | {{repositoryName}}{example}{example}{{workspaceName}}{example}{example}{{currentFolder}}{example}{example}{{action}}{example}{example}{{language}}{example}{example}{{fileName}}{example}{example} {{uploadId}} | {{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example} {{string}}{example}{example}{{string}}|Control the process of uploading a file, such as aborting, deleting or progressing the file.|

h1. ResourceBundleConnector     {anchor:id=CONTref.Devref.PublicRestAPIs.ResourceBundleConnector}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*ResourceBundleConnector*|{{ {noformat}{portalname}/{restcontextname}/bundle/{noformat} }}|*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-connector{noformat} }} |Get the bundle basing on the key and the locale.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getBundle*|{{ {noformat}{portalname}/{restcontextname}/bundle/getBundle/{key}/{locale}/{noformat} }}|{{key}}{example}{example}{{locale}}|{{string}}{example}{example}{{string}}|Get the bundle basing on the key and the locale.|

h1. VoteConnector     {anchor:id=CONTref.Devref.PublicRestAPIs.VoteConnector}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*VoteConnector*|{{ {noformat}{portalname}/{restcontextname}/contents/vote/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-connector{noformat} }} |Return and set a vote value of a given node in the sent parameter.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*postVote*|{{ {noformat}{portalname}/{restcontextname}/contents/vote/postVote/{repositoryName}/{workspaceName}/{jcrPath}/{vote}/{lang}/{noformat} }}| {{repositoryName}}  {example}{example} {{workspaceName}}  {example}{example} {{jcrPath}} {example}{example}  {{vote}}  {example}{example} {{lang}} | {{string}} {example}{example}{{string}}{example}{example} {{string}}{example}{example}{{string}}{example}{example}{{string}}{example}{example}{{string}} |Set a vote value for a given content.|
|*getVote*|{{ {noformat}{portalname}/{restcontextname}/contents/vote/getVote/{repositoryName}/{workspaceName}/{jcrPath}/{noformat} }} | {{repositoryName}}{example}{example} {{workspaceName}}{example}{example} {{jcrPath}} | {{string}} {example}{example}{{string}} {example}{example}{{string}} | Return a vote value for a given content.|


h1. DriverConnector   {anchor:id=CONTref.Devref.PublicRestAPIs.DriverConnector}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*DriverConnector*|{{ {noformat}{portalname}/{restcontextname}/wcmDriver/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-connector{noformat} }}  | Return a drive list, a folder list and a document list in a specified location for a given user. Also, it processes the file uploading action. |

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getDrivers*|{{ {noformat}{portalname}/{restcontextname}/wcmDriver/getDrivers/{noformat} }} |lang|{{string}}|Return a list of drives for the current user.|
|*getFoldersAndFiles*|{{ {noformat}{portalname}/{restcontextname}/wcmDriver/getFoldersAndFiles/{noformat} }} | {{driverName}}{example}{example} {{currentFolder}}{example}{example} {{currentPortal}}{example}{example} {{repositoryName}}{example}{example} {{workspaceName}}{example}{example} {{filterBy}} |{{string}}{example}{example}{{string}} {example}{example} {{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}}|Return all folders and files in a given location.|
|*uploadFile*|{{ {noformat}{portalname}/{restcontextname}/wcmDriver/uploadFile/upload/{noformat} }} | {{uploadId}} | {{string}} |Uploads a file.|
|*processUpload*|{{ {noformat}{portalname}/{restcontextname}/wcmDriver/uploadFile/control/{noformat} }} | {{repositoryName}}{example}{example} {{workspaceName}}{example}{example} {{driverName}}{example}{example} {{currentFolder}} {example}{example} {{currentPortal}} {example}{example} {{userId}}} {example}{example} {{jcrPath}} {example}{example} {{action}} {example}{example} {{language}}{example}{example} {{fileName}}{example}{example} {{uploadId}} | {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example} {{string}}|Control the process of uploading a file, such as aborting, deleting or processing the file.|

h1. GadgetConnector    {anchor:id=CONTref.Devref.PublicRestAPIs.GadgetConnector}
|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*GadgetConnector*|{{ {noformat}{portalname}/{restcontextname}/wcmGadget/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-connector{noformat}  }}| Instantiate a new gadget connector.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getFoldersAndFiles*|{{ {noformat}{portalname}/{restcontextname}/wcmGadget/getFoldersAndFiles/{currentFolder}/{lang}/{host}/{noformat} }} | {{currentFolder}}{example}{example} {{lang}}{example}{example} {{host}}|{{string}}{example}{example}{{string}} {example}{example}{{string}} | Get the folders and files.|


h1. PortalLinkConnector   {anchor:id=CONTref.Devref.PublicRestAPIs.PortalLinkConnector}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*PortalLinkConnector*|{{ {noformat}{portalname}/{restcontextname}/portalLinks/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-connector{noformat} }} | Return a page URI for a given location.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getPageURI*|{{ {noformat}{portalname}/{restcontextname}/portalLinks/getFoldersAndFiles/{noformat} }} | {{currentFolder}} {example}{example} {example}{example}|{{string}}{example}{example}{{string}} {example}{example}{{string}} | Get the page URI.|


h1. GetEditedDocumentRESTService  {anchor:id=CONTref.Devref.PublicRestAPIs.GetEditedDocumentRESTService}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*GetEditedDocumentRESTService*|{{ {noformat}{portalname}/{restcontextname}/presentation/document/edit/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-publication{noformat} }} | Return the latest edited documents.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getLastEditedDoc*|{{ {noformat}{portalname}/{restcontextname}/presentation/document/edit/{repository}/{noformat} }} | {{repository}}| {{string}} | Return the latest edited documents.|


h1. PublicationGetDocumentRESTService   {anchor:id=CONTref.Devref.PublicRestAPIs.PublicationGetDocumentRESTService}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*PublicationGetDocumentRESTService*|{{ {noformat}{portalname}/{restcontextname}/publication/presentation/{noformat} }} | *Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-publication{noformat} }} | Return a list of published documents.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getPublishDocument*|{{ {noformat}{portalname}/{restcontextname}/publication/presentation/{repository}/{workspace}/{state}/{noformat} }} |{{repository}}{example}{example} {{workspace}}{example}{example} {{state}}{example}{example}{{showItems}} | {{string}}{example}{example} {{string}}{example}{example} {{string}}{example}{example}{{string}} | Return a list of published document by the default plugin.|
|*getPublishedListDocument*|{{ {noformat}{portalname}/{restcontextname}/publication/presentation/{repository}/{workspace}/{publicationPluginName}/{state}/{noformat} }} | {{repository}}{example}{example} {{workspace}}{example}{example} {{publicationPluginName}}{example}{example} {{state}}{example}{example} {{showItems}} | {{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}}{example}{example}{{string}} {example}{example}{{string}} | Return a list of published documents by a specific plugin.|


h1. FavoriteRESTService  {anchor:id=CONTref.Devref.PublicRestAPIs.FavoriteRESTService}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*FavoriteRESTService*|{{ {noformat}{portalname}/{restcontextname}/favorite/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-services{noformat} }} | Return a list of favourite documents of a given user.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getFavoriteByUser*|{{ {noformat}{portalname}/{restcontextname}/favorite/all/{repoName}/{workspaceName}/{userName}{noformat} }} | {{repoName}}{example}{example} {{workspaceName}}{example}{example} {{userName}}{example}{example} {{showItems}} | {{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} | Return a list of favourite documents of a given user.|


h1. RESTImagesRendererService   {anchor:id=CONTref.Devref.PublicRestAPIs.RESTImagesRendererService}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*RESTImagesRendererService*|{{ {noformat}{portalname}/{restcontextname}/images/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-core-services{noformat} }} | Get the image binary data of a given image node.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*serveImage*|{{ {noformat}{portalname}/{restcontextname}/images/{repositoryName}/{workspaceName}/{nodeIdentifier}/{noformat} }} | {{repositoryName}}} {example}{example}{{workspaceName}}{example}{example} {{nodeIdentifier}}{example}{example} {{param|{{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} | Get the image binary data of a given image node.|


h1. LifecycleConnector  {anchor:id=CONTref.Devref.PublicRestAPIs.LifecycleConnector}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*LifecycleConnector*|{{ {noformat}{portalname}/{restcontextname}/authoring/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}{{exo-ecms-ext-authoring-services}}{noformat} }} | Return a list of contents in a given state range of the publication lifecycle.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*byState*|{{ {noformat}{portalname}/{restcontextname}/authoring/bystate/{noformat} }} | {{fromstate}}{example}{example} {{user}}{example}{example} {{lang}}{example}{example} {{workspace}}{example}{example} {{json}} | {{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} | Return a list of contents from the given state to the last state.|
|*toState*|{{ {noformat}{portalname}/{restcontextname}/authoring/toState/{noformat} }} |{{fromstate}}{example}{example} {{tostate}}{example}{example} {{user}}{example}{example} {{lang}}{example}{example} {{workspace}} {example}{example} {{json}} | {{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}}|Return a list of contents from the beginning state to the last state.|
|*byDate*|{{ {noformat}{portalname}/{restcontextname}/authoring/byDate/{noformat} }} |{{fromstate}}{example}{example} {{date}}{example}{example} {{lang}}{example}{example} {{workspace}}{example}{example} {{json}} | {{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example} {{string}}{example}{example}{{string}}{example}{example} {{string}} | Return a list of contents from the given beginning state and published before the given date.|


h1. CopyContentFile {anchor:id=CONTref.Devref.PublicRestAPIs.CopyContentFile}
|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*CopyContentFile*|{{ {noformat}{portalname}/{restcontextname}/copyfile/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ {noformat}exo-ecms-ext-authoring-services{noformat} }}| Copy a file.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*copyFile*|{{ {noformat}{portalname}/{restcontextname}/copyfile/copy/{noformat} }} |param - the file information|{{string}}|Copy a file.|

h1. PDFViewerRESTService   {anchor:id=CONTref.Devref.PublicRestAPIs.PDFViewerRESTService}
|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*PDFViewerRESTService*|{{ {noformat}{portalname}/{restcontextname}/pdfviewer//{repoName}/{workspaceName}/{pageNumber}/{rotation}/{scale}/{uuid}/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{ecms-core-viewer}} | Return the pdf content to display on the web page|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*getCoverImage*|{{ {noformat}{portalname}/{restcontextname}/pdfviewer//{repoName}/{workspaceName}/{pageNumber}/{rotation}/{scale}/{uuid}/{noformat} }} | {{repoName}}{example}{example} {{workspaceName}}{example}{example}{{uuid}}{example}{example}{{pageNumber}}{example}{example}{{rotation}} {example}{example}{{scale}} | {{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} |Return a thumbnail image for a pdf document. |

h1. ManageDocumentService {anchor:id=CONTref.JavaServices.ManageDocumentService}

|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*ManageDocumentService*|{{ {noformat}{portalname}/{restcontextname}/managedocument/{noformat} }} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{exo-ecms-core-connector}} |The service which is used to perform some actions on a folder or a file, such as creating, deleting a folder/file, or uploading a file.|

* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
| *getDrives*|{{ {noformat}{portalname}/{restcontextname}/managedocument/getDrives/{noformat} }} | {{driveType}} - types of drive (General, Group, or Personal) | {{string}}|Get all drives by type (General, Group or Personal drive). |
| *getFoldersAndFiles*|{{  {noformat}{portalname}/{restcontextname}/managedocument/getFoldersAndFiles/{noformat} }} | {{driveName }} - the drive name {example}{example} {{workspaceName}} - the workspace name {example}{example} {{currentFolder }} - the path to the folder to achieve its folders and file | {{string}} {example}{example} {{string}}{example}{example}{{string}} |Get all folders and files which the current user can view.|
| *createFolder*|{{  {noformat}{portalname}/{restcontextname}/managedocument/createFolder/{noformat} }} | {{driveName}} - the drive name {example}{example} {{workspaceName}} - the workspace name{example}{example}  {{currentFolder}} - the path to the folder to which a child folder is add {example}{example}{{folderName}} - the folder name | {{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}} | Create a new folder and return its information.|
| *deleteFolderOrFile*|{{ {noformat}{portalname}/{restcontextname}/managedocument/deleteFolderOrFile/{noformat} }} | {{driveName}} - the drive name {example}{example} {{workspaceName}} - the workspace name {example}{example} {{itemPath }} - the path to the folder/file. |{{string}} {example}{example} {{string}}{example}{example}{{string}}| Delete a folder or a file.|
| *upload*|{{  {noformat}{portalname}/{restcontextname}/managedocument//uploadFile/upload/{noformat} }} | {{servletRequest}} - the servlet request{example}{example} {{uploadId}} - the Id of the upload resource  | {{HttpServletRequest}}{example}{example} {{string}} |Upload a file to the server. |
| *control*|{{  {noformat}{portalname}/{restcontextname}/managedocument//uploadFile/control/{noformat} }} | {{workspaceName}} - the workspace name{example}{example} {{driveName}} - the drive name {example}{example} {{currentFolder}} - the path to the current folder {example}{example} {{currentPortal}} - the current site {example}{example} {{action}} - the action to perform (save, process and more){example}{example} {{language}} - the language of the user{example}{example} {{fileName}} - the file name{example}{example} {{uploadId}} - the Id of the upload resource | {{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}}{example}{example}{{string}}{example}{example}{{string}} {example}{example}{{string}} {example}{example}{{string}}|Return the information about the upload status of a file (upload percentage, file name, and more). |

h1. DownloadConnector {anchor:id=CONTref.JavaServices.DownloadConnector}
|| *Service name* || *Service URL* || *Location* ||  *Description* ||
|*DownloadConnector*|{{{{portalname}/{restcontextname}/contents/}}} |*Maven groupId*: {{org.exoplatform.ecms}} {example}{example} *ArtifactId*: {{exo-ecms-core-connector}}| Enable downloading the content of _nt\:file_.|


* *APIs usage*:
|| *Name* || *Service URL endpoint* || *Parameters* || *Values* || *Description* ||
|*download*|{{{{portalname}/{restcontextname}/contents/download/{workspace}/{path:.*}/}}} |{{workspace}} - the workspace where stores the document node {example}{example} {{path}} - the path of the document node |{{string}} {example}{example} {{string}}|Return to browser a stream got from _jcr\:content_/_jcr\:data_ for downloading the content of the node.|